/*
 * Velvet Chess Engine
 * Copyright (C) 2020 mhonert (https://github.com/mhonert)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */
extern crate velvet;

#[cfg(feature = "lgp_training")]
use velvet::genetic_eval_trainer::{GeneticEvaluator, GeneticProgram};

#[cfg(not(feature = "lgp_training"))]
use velvet::genetic_eval::{GeneticEvaluator, GeneticProgram};
use std::fs::File;
use std::io::{BufWriter, Write};

const HEADER: &str = r#"
/*
 * Velvet Chess Engine
 * Copyright (C) 2020 mhonert (https://github.com/mhonert)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

// Auto-generated file (see src/bin/gen_eval.rs)

use crate::random::Random;

pub struct GeneticEvaluator {}

impl GeneticEvaluator {

    pub fn new() -> Self {
        GeneticEvaluator{}
    }

    pub fn compile(&mut self) {}
"#;

const FOOTER: &str = r#"

    pub fn add_program(&mut self, _: GeneticProgram) {}

    pub fn clear(&mut self) {}

    pub fn init_generation(&self, _: &mut Random, _: u32) {}

    pub fn create_new_generation(&self, _: &mut Random) {}

    pub fn print_rust_code(&self) {}
}

#[derive(Copy, Clone)]
#[allow(unused_mut)]
pub struct GeneticProgram {}

impl GeneticProgram {
    pub fn new_from_str(_: &str, _: [u64; 8], _: i32, _: i32) -> GeneticProgram {
        GeneticProgram{}
    }
}
"#;

fn main() {
    println!("Compile genetic programs to Rust eval function ...");

    let file: Box<dyn Write> = Box::new(File::create("./src/genetic_eval.rs").expect("Could not create output file"));
    let mut writer = BufWriter::new(file);

    let mut eval = GeneticEvaluator::new();

    eval.add_program(GeneticProgram::new_from_str("1282945150652418934438064215207114518106705463748753922476356167085857789182716683396660517682861260", [7762, 33562157, 7707, 33562117, 7724, 7730, 244, 7759], 3, 3));
    eval.add_program(GeneticProgram::new_from_str("93226435895396981333912481912232327593075287161484598616503928109431120033444658879161131275639376718370546195255351585150973698", [64, 66, 7592, 61, 90, 57, 18446744073709551526, 7576], -15, 1));
    eval.add_program(GeneticProgram::new_from_str("1504266140075427067246495100414439727007826415872796291647267548852853563162945538850011246258831919646298786119604352694489230", [3280636587073003389, 3280636587073003388, 2470, 3280636587073003397, 536941049, 573856, 18446708889328917392, 11539818134769519378], -7, 1));
    eval.add_program(GeneticProgram::new_from_str("441568676013714076786941913655067980040206040143612155917305889788109620221173670810911564310705254815619172198042829108839039076066443777755769484876", [0, 2, 4, 9906581, 4898306437208938684, 2048, 34900055107, 17713979277558856987], 14, 1));
    eval.add_program(GeneticProgram::new_from_str("25", [8841, 778, 2879, 4098, 18446744073709536812, 18446744073709097303, 3724416, 16965737190118417767], -1, 1));
    eval.add_program(GeneticProgram::new_from_str("1861940014073450800278395606740857672767924232003336445220528361046415873418627492772939018703252529283297592000549281178532220758779400259566871581615823", [2305843009213695925, 2305843009213695945, 32765, 2305843009213695933, 2305843009213695929, 1073743827, 2305843009213695961, 32761], -1, 0));
    eval.add_program(GeneticProgram::new_from_str("454640705868950059397863962353618159219778749678703115656175915821052325180661844898044889575853184770931193708643219095873747884089481771890631393735", [18446744073708502356, 19791209748815, 82, 16140900995776371406, 68719563369, 425503, 2347577, 16239597078613725902], 49, 0));
    eval.add_program(GeneticProgram::new_from_str("25", [74, 1, 350, 18446744073675995348, 26921, 18446744073708919135, 18446744073701052899, 3961548357687308552], -30, 0));
    eval.add_program(GeneticProgram::new_from_str("23", [616878, 6131, 7514926946132035521, 4611686018427395211, 18446744073709477255, 451843, 8948829, 3395173911979010648], -8, 3));
    eval.add_program(GeneticProgram::new_from_str("110995499818314200302430717732200666518550662295272801894310915773857435868676047377331084264586528036598044057937434304416522961128393470437520193", [2, 277517, 63, 4084665414722096509, 18446744073709452663, 18446744073709011401, 18014398510007254, 14415873737311418826], -3, 0));
    eval.add_program(GeneticProgram::new_from_str("26148274708033362939819227357167064929410983805614943458512607587912768343712676818863555271837587047093483072897347802206472", [134217734, 268136, 18446744073704494705, 4, 862594, 37, 18446744073709550608, 144115188076718348], 34, 4));
    eval.add_program(GeneticProgram::new_from_str("382374002823159653230848164489545613247701034812336983715147275978172385952233656114842731741797368103335970638824362665172460393928", [6, 94, 4174, 239, 4187, 93, 2331, 562949953683445], -3, 2));
    eval.add_program(GeneticProgram::new_from_str("1569048674669756785294943186379469498928606965808984123277572794709323866288325426247391829267492011539177906013122053010151483960022215", [8877156, 18446744073708593032, 18446744073708593031, 9316488438202280802, 18446744073708593048, 18446744073708601240, 18446744073708593044, 8337], -40, 1));
    eval.add_program(GeneticProgram::new_from_str("19580203196586773275092245720209241005862546243058243445995410149630401705634483241220371677068822300730121", [18446744073709551558, 16140901064495255211, 18446744073709551072, 18446744073709550090, 36028797019029752, 233567, 17592189346891, 17557584630724680397], 1, 0));
    eval.add_program(GeneticProgram::new_from_str("4835006942439870505035340644259229349798380098273016305798797214615787990766900024055402416039948534212", [18446744073675964406, 34075, 18446744073709518855, 18446744073709517539, 18446744073709518854, 288230376155302844, 10037668340792774616, 18446744073709518822], -2, 1));
    eval.add_program(GeneticProgram::new_from_str("24031150107696958290373405167085937803320416825055004659122905910225133165207638634752948257386490113922646481072974397006294", [45695, 45691, 24, 18446744073709506147, 18446744073709506153, 45694, 18446744073709551590, 18446744073709291378], 0, 2));
    eval.add_program(GeneticProgram::new_from_str("5", [184578, 184574, 58, 935646, 18446735277616500834, 18446744073709027288, 5329012, 6951507638067562510], 0, 2));
    eval.add_program(GeneticProgram::new_from_str("1360932785450069631136488694992646682322081969591818991264938523203651026581983613688438025832614638609506690702901702", [3, 3, 18446744073441094681, 21478, 0, 9489741328107767314, 18446744073709528083, 18446744073441094697], 6, 2));
    eval.add_program(GeneticProgram::new_from_str("23504210862725609434084431622670700901485178769150014313960450855841786688117434042822746764824942903175294247494932247613505", [7632984167002667248, 7632984167002667263, 10813759906706884367, 7632984167002667244, 10813768702799906800, 10813759906706884608, 587299, 10813759906706884604], -3, 0));
    eval.add_program(GeneticProgram::new_from_str("5574362835155331048239492861815681817480479108950822321909175575618053812281847686993774438298974171892377654666260420635", [1302356, 1301854, 18446744073708249248, 1302359, 1302367, 1302362, 1302352, 144115188077157742], -10, 1));
    eval.add_program(GeneticProgram::new_from_str("6816455736336645710360275372362601301372653950137146691737117289611983592945618357204202503375981381698064312341427113709723928810174736249682536283", [8885231996070817490, 8885231996062428890, 8885231996062428878, 8885231996062428878, 8885231996068720318, 1125899907722377, 140737495753551, 16720434403367754962], 6, 0));
    eval.add_program(GeneticProgram::new_from_str("342031303783738390510411734337794113376046860642061571720223806472694363158793635970194006982781246759550881771786", [18446735277616526471, 288230380446679778, 18446744073709252391, 727, 18446744073709528635, 18446744073708597437, 1152921504608621729, 7706374585799599261], -10, 1));
    eval.add_program(GeneticProgram::new_from_str("25", [57605, 0, 1895176231925514172, 18446744073709548523, 18446744073709533129, 18446744073708569052, 18446744073702423036, 5343514285153878048], -5, 1));
    eval.add_program(GeneticProgram::new_from_str("1569071346205083722549337684738021305757098074240917176030896260087608025015276725082235514789923168431872724457060715670475387013264855", [18446744073709551547, 8611646, 0, 52, 8460, 84, 18446744073707959505, 8822534482803818814], -9, 2));
    eval.add_program(GeneticProgram::new_from_str("25", [18446744073708555227, 283, 295, 64854, 18446744073709486728, 89409, 9977777, 9172409707509730438], 20, 1));
    eval.add_program(GeneticProgram::new_from_str("25", [5, 18446744073709551615, 683, 18446181123756129091, 18446181123751864727, 359158, 1083578732, 9468512319799174395], -37, 0));
    eval.add_program(GeneticProgram::new_from_str("2521", [18446744073708495394, 1737633, 18446744073703718548, 7606, 70573, 1617100, 1152921504616177919, 4731316959275799021], 5, 0));
    eval.add_program(GeneticProgram::new_from_str("1401585596309529067304498966044808101288288532887069984075157634253125202788209803587325477185773508392497009214940046", [6, 140737488355349, 18302628885633695743, 20971898, 57301, 549755934707, 281474985427748, 14199880956005072615], -4, 0));
    eval.add_program(GeneticProgram::new_from_str("19703472985377966130260333762093038823266394727529241597611184314716635928450395559539293", [13, 434, 9, 0, 34603013, 4029457485967648927, 1, 4029457485967648907], 2, 2));
    eval.add_program(GeneticProgram::new_from_str("383019768970333744628898313664597945929160848519388700247928751227320430837447660565939512516475509376543617429325467606900738896901", [5097, 5085, 5082, 18158513697557831559, 18446744073701157790, 9223372036855478059, 6249955, 3171208779384266570], 11, 4));
    eval.add_program(GeneticProgram::new_from_str("25", [525265277316372310, 525265277316372315, 14260600913857999325, 8589937053, 18446744073709490966, 687194873640, 2946225, 6083437118308117908], 13, 1));
    eval.add_program(GeneticProgram::new_from_str("1808989880367846647044999705981568973777929652442154290402764002868149740483930456873903009339993167132013708632082362169876533309880766035902856262197851", [38907, 16793, 16793, 153757, 16772, 202647, 5183795, 9366971250274331224], 3, 3));
    eval.add_program(GeneticProgram::new_from_str("25", [9822, 85513, 577761, 8953, 97189, 18446742974197095475, 3788622, 2858942805095925302], -1, 1));
    eval.add_program(GeneticProgram::new_from_str("9", [198172, 363, 13, 1335556, 18446744073709452910, 18446744073708804637, 4625889, 18129925814275053672], -3, 0));
    eval.add_program(GeneticProgram::new_from_str("11", [9229907189249661363, 5691732327006549770, 54117, 14545439841635273005, 16793229, 18446744073708711146, 18437719281730586603, 15405659813494378311], 14, 1));
    eval.add_program(GeneticProgram::new_from_str("106555993548131957734101112812029737772755738329993152363930862333753516268555269931892182164621041316239323513759004395259673796816894836955223112", [2638162445392110821, 16, 9608527538939617202, 9608526989183803302, 23, 9608526851476422593, 8208, 11554367812905639205], -23, 2));
    eval.add_program(GeneticProgram::new_from_str("24472021768918654691225052080579022767111737555829540144258323824146655634491733012191283205567381974914981402160074494645256611567326", [18446744073709543399, 444564, 8815862479367325030, 18446744073709543416, 18446744073709543357, 18446744073709543411, 8815862479367324764, 8815862479367324780], -2, 0));
    eval.add_program(GeneticProgram::new_from_str("75536649553871868950875224715851643226510358675889128391345197536849737542241206257301957076219491474", [18446744073709027258, 4620833955170484274, 18446744073709027238, 18446744073709027256, 9007199254741058, 69, 18446744073709027255, 9007199254741043], 4, 3));
    eval.add_program(GeneticProgram::new_from_str("25", [2990658, 19, 382, 3581, 18446744073709452613, 34360084042, 18446744073707998828, 432466094435022784], 5, 0));
    eval.add_program(GeneticProgram::new_from_str("7", [66430, 72057594037927937, 4449279058179712957, 18446744073708496195, 18446744073709462188, 562949954278396, 17592455783586, 2602687757667693375], -29, 0));
    eval.add_program(GeneticProgram::new_from_str("6429757710071403880245230014392920989613506070443902757244238784191238619328642694808387053970170175156354409550936115455567173647991976585", [18446743936270533475, 84713, 16093483874246907145, 8796093022229, 74262, 199053, 8075116, 8650524036152644052], -4, 2));
    eval.add_program(GeneticProgram::new_from_str("1808983740269520996588102593705871872789916679453326816143307234397152396939949079874221708415900537268773425461586312784042532904715484337413356498466762", [4203360, 18442240474077977760, 13835058055282163183, 4203356, 18442240474077453472, 18442240474077977761, 4236112, 4611703610613432880], 21, 1));
    eval.add_program(GeneticProgram::new_from_str("30759405075946038302004386134284423239004905605248790394465552353821760745257689197714613600333567847650601437388216366069786526410367300908370684557763", [6, 72058143793750018, 8796093022208, 8, 0, 72057594037936130, 7, 92], -19, 2));
    eval.add_program(GeneticProgram::new_from_str("1568778512243484799435025473635916578730094516151186724297072827106008884704948794390595067291646384671410366556325696965971989051614744", [2, 1, 9369, 9385, 47410, 72057594038877914, 18446744073708881442, 8814035848415816337], -9, 4));
    eval.add_program(GeneticProgram::new_from_str("24", [10, 648567, 9957, 703, 18446739125907202157, 508445, 18446744073700684875, 13928662035050500714], -5, 0));
    eval.add_program(GeneticProgram::new_from_str("1362162891029533310790742573175520715373747695546562294261104241026967238037409201178494925045761351713232646883358297", [36028797019487834, 576460752303947369, 36310271996198489, 576460752303947368, 523853, 523879, 36028797019487818, 523863], 13, 3));
    eval.add_program(GeneticProgram::new_from_str("5579414064586358548473897901897620911324210843299280580462234728354183430973509693473526033424011896331586652604484625034", [8689097, 35184372089087, 18446145939384041220, 26, 18446744073709551360, 18446744073709544190, 18446708889337462528, 15801027882052033804], 46, 3));
    eval.add_program(GeneticProgram::new_from_str("1808670291750226550671026045671482214130678236219346689227786073436797916820146048574191475298347356417055352901194730503897558388219285981752292970615568", [9, 253, 18446744073708166206, 18446744073709550501, 1149, 1109, 18446744073709057096, 903625686482069647], -2, 1));
    eval.add_program(GeneticProgram::new_from_str("25", [3203, 2329343350178018276, 743, 18446744073709543248, 21232, 137439604106, 18446744073703866858, 1296760349771867867], -12, 0));
    eval.add_program(GeneticProgram::new_from_str("3958404689290836192739133426897570352552269445358628174008120922697", [18446744073709551615, 0, 36028797018963984, 18446744073709541794, 57182, 824482, 35184406517210, 4544318571010053268], -1, 0));
    eval.add_program(GeneticProgram::new_from_str("25", [6620, 97, 641, 18446744073709546014, 4294994001, 283674009011879, 9726025, 2831945966907948985], 0, 1));
    eval.add_program(GeneticProgram::new_from_str("1180329245093963585926676671345111430014690800989008686633467695341150800286797658966575334087861844", [94755, 2305843009213693952, 9007199254798037, 35184405700274, 23877, 18446744073709069332, 140737492570030, 12767654089696838906], -11, 5));
    eval.add_program(GeneticProgram::new_from_str("383591219484656863282130085872259317707994102986092001170751248510445901523984674620540713926937097160290705719775670362265216921739", [28368, 1073743647, 2974, 18446744073709548642, 18446744073709470769, 329458, 18446741874677787935, 14454101797937729031], 41, 0));
    eval.add_program(GeneticProgram::new_from_str("1667223766338458917562059147051973922601332542572113405146164795916726557186096349996864478979016226452018697259519898699872524116772423492740892", [84817, 169, 71435, 7, 185, 0, 18446744073708705633, 14047305199545994161], -5, 1));
    eval.add_program(GeneticProgram::new_from_str("6365768918607045874816047929545443722746324170846606486057453280815098794369370421697928743091536108993544510545248702959879759071922173389", [8390905, 12507505554871882366, 18446744073709471060, 80528, 70368744266473, 477425, 7668450, 12970353442509024375], -6, 1));
    eval.add_program(GeneticProgram::new_from_str("9612105172743767", [8, 18302628885633678698, 18446744073709534570, 18446744073709551323, 49750, 1125899907539493, 18446744073707954416, 14652879573393561780], -2, 1));
    eval.add_program(GeneticProgram::new_from_str("7357180488443333230690784692142100951883036549546402681325911972087867173308801364438520683396868995281526795273809739924103783861880486368", [4, 1125899906850823, 36950, 36955, 2305843009213730906, 8199, 0, 2305843009213730898], 8, 2));
    eval.add_program(GeneticProgram::new_from_str("5980030314120023240618768426436752626421556900248386443613359843174962031362742033414208112809831914372202861847533559540703954689", [335, 1395037475452564996, 1395037475452564995, 1395037475444176376, 1395037475452564995, 56036, 16140901063422115524, 56037], -36, 2));
    eval.add_program(GeneticProgram::new_from_str("1932472292816709799961286266493895776402631583693791357226132334944502344997832348624983657707442799740065765015136373663508092614756162244564761", [18446462598732840952, 39, 18446744073709551528, 82439, 23, 231, 901560604033342292, 1152921504606929415], -2, 0));
    eval.add_program(GeneticProgram::new_from_str("383409777045764368887107423511328955109270037881352126777895457807211558477937288386183463060123581191142137637000080317136011404892", [62, 103, 312, 18446744073708665286, 886329, 19, 52, 35], -4, 0));
    eval.add_program(GeneticProgram::new_from_str("25", [5483, 18446744073706445782, 68987929340, 34359748190, 34359830292, 34136280, 494363, 5871923223522819617], 11, 2));
    eval.add_program(GeneticProgram::new_from_str("107823822823299962555606830197066805612617882931919806515367312069768062400360026138576990771718870595230150547752243475748875208508541552831635586", [7929520, 99345, 99362, 7929504, 18446744073709452274, 99337, 1639942749698054370, 99331], -9, 0));
    eval.add_program(GeneticProgram::new_from_str("25", [1201, 4611686018427388208, 763, 576460752572909859, 9223372036854735202, 887257, 68002689, 13736770957194314118], -1, 1));
    eval.add_program(GeneticProgram::new_from_str("5587189419503747504752271238486066441869342562831855049266563424560033750416777559948730589861392993394573427770498857435", [78033, 77968, 78000, 18446744073709473634, 18446744073709473635, 77996, 536948893, 77984], 25, 0));

    writeln!(writer, "{}", HEADER).expect("could not write file");
    eval.write_rust_code(&mut writer).expect("could not write file");
    writeln!(writer, "{}", FOOTER).expect("could not write file");

}